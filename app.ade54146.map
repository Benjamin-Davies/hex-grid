{"version":3,"sources":["node_modules\\gl-matrix\\src\\gl-matrix\\common.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat2.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat2d.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat3.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat4.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec3.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec4.js","node_modules\\gl-matrix\\src\\gl-matrix\\quat.js","node_modules\\gl-matrix\\src\\gl-matrix\\quat2.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec2.js","node_modules\\gl-matrix\\src\\gl-matrix.js","hex.ts","colors.ts","game.ts","app.ts"],"names":["setMatrixArrayType","toRadian","equals","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","type","degree","PI","a","b","abs","max","create","clone","copy","identity","fromValues","set","transpose","invert","adjoint","determinant","multiply","rotate","scale","fromRotation","fromScaling","str","frob","LDU","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","glMatrix","out","m00","m01","m10","m11","a1","a0","a2","a3","det","b0","b1","b2","b3","rad","s","sin","c","cos","v","v0","v1","sqrt","pow","L","D","U","mul","sub","translate","fromTranslation","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","fromMat4","fromMat2d","fromQuat","normalFromMat4","projection","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","y","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","width","height","a6","a7","a8","b6","b7","b8","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","frustum","perspective","perspectiveFromFieldOfView","ortho","lookAt","targetTo","m03","m13","m23","m30","m31","m32","m33","axis","len","t","xy","xz","yz","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","mat","trace","S","sx","sy","sz","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","angle","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","r","zScale","m","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","tempA","tempB","cosine","acos","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l","vectorScale","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","calculateW","slerp","conjugate","fromMat3","fromEuler","mat3","vec3","vec4","out_axis","omega","cosom","sinom","scale0","scale1","invDot","fTrace","fRoot","j","k","halfToRad","cx","cy","cz","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","fromRotationTranslationValues","getDual","setDual","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","quat","mat4","dq","w1","outer","getReal","setReal","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","mat2","mat2d","quat2","vec2","exports","__esModule","gl_matrix_1","require","hexToCartMat","cartToHexMat","hexToCart","cartToHex","radiusRatio","hexVerts","theta","push","background","outline","vertex","hex_1","colors","Game","ctx","mouseHex","draw","bind","prototype","start","_this","canvas","addEventListener","ev","clientX","offsetLeft","clientY","offsetTop","requestAnimationFrame","checkResize","clearRect","save","drawCell","restore","clientWidth","clientHeight","translateHex","temp","fillStyle","strokeStyle","lineWidth","beginPath","_i","hexVerts_1","vert","lineTo","closePath","fill","stroke","game_1","document","getElementById","getContext","Error","game"],"mappings":"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","file":"app.ade54146.map","sourceRoot":"..","sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar gl_matrix_1 = require(\"gl-matrix\");\r\n/**\r\n * The hexToCart matrix\r\n */\r\nexports.hexToCartMat = gl_matrix_1.mat2.fromValues(1, 0, Math.cos(Math.PI / 3), Math.sin(Math.PI / 3));\r\n/**\r\n * The cartToHex matrix\r\n */\r\nexports.cartToHexMat = gl_matrix_1.mat2.create();\r\ngl_matrix_1.mat2.invert(exports.cartToHexMat, exports.hexToCartMat);\r\n/**\r\n * Transform a vector from hexagonal coordinates to cartesian coordinated\r\n * @param out The vec2 to output to\r\n * @param a The vec2 to transform\r\n */\r\nfunction hexToCart(out, a) {\r\n    return gl_matrix_1.vec2.transformMat2(out, a, exports.hexToCartMat);\r\n}\r\nexports.hexToCart = hexToCart;\r\n/**\r\n * Transform a vector from cartesian coordinates to hexagonal coordinated\r\n * @param out The vec2 to output to\r\n * @param a The vec2 to transform\r\n */\r\nfunction cartToHex(out, a) {\r\n    return gl_matrix_1.vec2.transformMat2(out, a, exports.cartToHexMat);\r\n}\r\nexports.cartToHex = cartToHex;\r\n/**\r\n * The ratio between the outer and inner radii of a hexagon\r\n */\r\nexports.radiusRatio = Math.sin(Math.PI / 3);\r\n/**\r\n * The vertices for a hexagon\r\n */\r\nexports.hexVerts = [];\r\nfor (var i = 0; i < 6; i++) {\r\n    var theta = (i * Math.PI) / 3;\r\n    exports.hexVerts.push(gl_matrix_1.vec2.fromValues(Math.sin(theta) / exports.radiusRatio / 2, Math.cos(theta) / exports.radiusRatio / 2));\r\n}\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nexports.background = 'lightblue';\r\nexports.outline = 'white';\r\nexports.vertex = 'limegreen';\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar gl_matrix_1 = require(\"gl-matrix\");\r\nvar hex_1 = require(\"./hex\");\r\nvar colors = require(\"./colors\");\r\nvar Game = /** @class */ (function () {\r\n    function Game(ctx) {\r\n        this.mouseHex = gl_matrix_1.vec2.create();\r\n        this.ctx = ctx;\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n    Game.prototype.start = function () {\r\n        var _this = this;\r\n        var canvas = this.ctx.canvas;\r\n        canvas.addEventListener('mousemove', function (ev) {\r\n            var v = gl_matrix_1.vec2.fromValues(ev.clientX - canvas.offsetLeft, ev.clientY - canvas.offsetTop);\r\n            gl_matrix_1.vec2.scale(v, v, 1 / _this.scale);\r\n            hex_1.cartToHex(v, v);\r\n            gl_matrix_1.vec2.round(v, v);\r\n            _this.mouseHex = v;\r\n        });\r\n        this.draw();\r\n    };\r\n    Game.prototype.draw = function () {\r\n        requestAnimationFrame(this.draw);\r\n        var ctx = this.ctx;\r\n        this.checkResize();\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        ctx.save();\r\n        ctx.translate(this.width / 2, this.height / 2);\r\n        for (var y = -15; y < 15; y++) {\r\n            for (var x = -10; x < 10; x++) {\r\n                var v = gl_matrix_1.vec2.fromValues(x, y);\r\n                this.drawCell(v, gl_matrix_1.vec2.equals(v, this.mouseHex) ? colors.vertex : colors.background);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    };\r\n    Game.prototype.checkResize = function () {\r\n        var canvas = this.ctx.canvas;\r\n        if (this.width !== canvas.clientWidth ||\r\n            this.height !== canvas.clientHeight) {\r\n            this.width = canvas.width = canvas.clientWidth;\r\n            this.height = canvas.height = canvas.clientHeight;\r\n            this.scale = Math.min(this.width, this.height) / 10;\r\n        }\r\n    };\r\n    Game.prototype.translateHex = function (v) {\r\n        var temp = gl_matrix_1.vec2.create();\r\n        gl_matrix_1.vec2.scale(temp, v, this.scale);\r\n        hex_1.hexToCart(temp, temp);\r\n        this.ctx.translate(temp[0], temp[1]);\r\n    };\r\n    Game.prototype.drawCell = function (v, type) {\r\n        var ctx = this.ctx;\r\n        ctx.save();\r\n        this.translateHex(v);\r\n        if (typeof type === 'string') {\r\n            ctx.fillStyle = type;\r\n            ctx.strokeStyle = colors.outline;\r\n            ctx.lineWidth = this.scale / 10;\r\n            ctx.beginPath();\r\n            for (var _i = 0, hexVerts_1 = hex_1.hexVerts; _i < hexVerts_1.length; _i++) {\r\n                var vert = hexVerts_1[_i];\r\n                ctx.lineTo(vert[0] * this.scale, vert[1] * this.scale);\r\n            }\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.stroke();\r\n        }\r\n        ctx.restore();\r\n    };\r\n    return Game;\r\n}());\r\nexports[\"default\"] = Game;\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar game_1 = require(\"./game\");\r\nvar canvas = document.getElementById('main-canvas');\r\nvar ctx = canvas.getContext('2d');\r\nif (!ctx) {\r\n    throw new Error('Could not create drawing context');\r\n}\r\nvar game = new game_1[\"default\"](ctx);\r\ngame.start();\r\n"]}