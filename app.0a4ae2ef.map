{"version":3,"sources":["node_modules\\gl-matrix\\src\\gl-matrix\\common.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat2.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat2d.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat3.js","node_modules\\gl-matrix\\src\\gl-matrix\\mat4.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec3.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec4.js","node_modules\\gl-matrix\\src\\gl-matrix\\quat.js","node_modules\\gl-matrix\\src\\gl-matrix\\quat2.js","node_modules\\gl-matrix\\src\\gl-matrix\\vec2.js","node_modules\\gl-matrix\\src\\gl-matrix.js","hex.ts","colors.ts","game.ts","app.ts"],"names":["setMatrixArrayType","toRadian","equals","EPSILON","ARRAY_TYPE","Float32Array","Array","RANDOM","Math","random","type","degree","PI","a","b","abs","max","create","clone","copy","identity","fromValues","set","transpose","invert","adjoint","determinant","multiply","rotate","scale","fromRotation","fromScaling","str","frob","LDU","add","subtract","exactEquals","multiplyScalar","multiplyScalarAndAdd","glMatrix","out","m00","m01","m10","m11","a1","a0","a2","a3","det","b0","b1","b2","b3","rad","s","sin","c","cos","v","v0","v1","sqrt","pow","L","D","U","mul","sub","translate","fromTranslation","d","tx","ty","aa","ab","ac","ad","atx","aty","a4","a5","b4","b5","fromMat4","fromMat2d","fromQuat","normalFromMat4","projection","m02","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","b00","b02","b10","b12","b20","b22","x","y","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","width","height","a6","a7","a8","b6","b7","b8","rotateX","rotateY","rotateZ","fromXRotation","fromYRotation","fromZRotation","fromRotationTranslation","fromQuat2","getTranslation","getScaling","getRotation","fromRotationTranslationScale","fromRotationTranslationScaleOrigin","frustum","perspective","perspectiveFromFieldOfView","ortho","lookAt","targetTo","m03","m13","m23","m30","m31","m32","m33","axis","t","len","xy","xz","yz","translation","bx","by","bz","bw","ax","ay","az","aw","magnitude","mat","trace","S","sx","sy","sz","o","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","left","right","bottom","top","near","far","rl","tb","nf","fovy","aspect","f","tan","fov","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","lr","bt","eye","center","up","x0","x1","y0","y1","z0","z1","eyex","eyey","eyez","upx","upy","upz","centerx","centery","centerz","target","a9","a14","a15","b9","b13","b14","b15","length","divide","ceil","floor","min","round","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","transformMat4","transformMat3","transformQuat","angle","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","r","zScale","m","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","tempA","tempB","cosine","acos","div","dist","sqrDist","sqrLen","forEach","vec","stride","offset","count","fn","arg","i","l","vectorScale","v2","v3","v4","s1","s2","ix","iy","iz","iw","setAxisAngle","getAxisAngle","calculateW","slerp","conjugate","fromMat3","fromEuler","mat3","vec3","vec4","out_axis","omega","cosom","sinom","scale0","scale1","invDot","fTrace","fRoot","j","k","halfToRad","cx","cy","cz","rotationTo","tmpvec3","xUnitVec3","yUnitVec3","sqlerp","temp1","temp2","setAxes","matr","view","fromRotationTranslationValues","getDual","setDual","rotateByQuatAppend","rotateByQuatPrepend","rotateAroundAxis","quat","mat4","dq","w1","outer","getReal","setReal","ax1","ay1","az1","aw1","bx1","by1","bz1","ax2","ay2","az2","aw2","axisLength","ax0","ay0","az0","aw0","bw1","bx0","by0","bz0","bw0","mt","sqlen","transformMat2","transformMat2d","p0","p1","sinC","cosC","len1","len2","mat2","mat2d","quat2","vec2","exports","__esModule","gl_matrix_1","require","hexToCart","hexToCartMat","cartToHex","cartToHexMat","radiusRatio","hexVerts","theta","push","background","outline","vertex","hex_1","colors","Game","ctx","mouseHex","draw","bind","prototype","start","_this","canvas","addEventListener","ev","clientX","offsetLeft","clientY","offsetTop","checkResize","clearRect","save","drawCell","restore","clientWidth","clientHeight","translateHex","temp","fillStyle","strokeStyle","lineWidth","beginPath","_i","hexVerts_1","vert","lineTo","closePath","fill","stroke","game_1","document","getElementById","getContext","Error","game"],"mappings":"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","file":"app.0a4ae2ef.map","sourceRoot":"..","sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n","import * as glMatrix from \"./common.js\"\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nexport function fromValues(m00, m01, m10, m11) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    let a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  let det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  let a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nexport function fromValues(a, b, c, d, tx, ty) {\n  let out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nexport function invert(out, a) {\n  let aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  let atx = a[4], aty = a[5];\n\n  let det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function multiply(out, a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function rotate(out, a, rad) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nexport function scale(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nexport function translate(out, a, v) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  let out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b01 = a22 * a11 - a12 * a21;\n  let b11 = -a22 * a10 + a12 * a20;\n  let b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2];\n  let a10 = a[3], a11 = a[4], a12 = a[5];\n  let a20 = a[6], a21 = a[7], a22 = a[8];\n\n  let b00 = b[0], b01 = b[1], b02 = b[2];\n  let b10 = b[3], b11 = b[4], b12 = b[5];\n  let b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n  let a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function fromRotation(out, rad) {\n  let s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nexport function normalFromMat4(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1], a02 = a[2], a03 = a[3];\n    let a12 = a[6], a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  let a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  let a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  let a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0], y = axis[1], z = axis[2];\n  let len = Math.sqrt(x * x + y * y + z * z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {quat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0], by = -a[1], bz = -a[2], bw = a[3],\n  ax = a[4], ay = a[5], az = a[6], aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  let trace = mat[0] + mat[5] + mat[10];\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5]) && (mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0], y = q[1], z = q[2], w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2);\n  let nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  let downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  let leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  let rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n      Math.abs(eyey - centery) < glMatrix.EPSILON &&\n      Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  let z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  let len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  len = x0*x0 + x1*x1 + x2*x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  let a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  let a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  let a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  let b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  let b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  let b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  let b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nexport function fromValues(x, y, z) {\n  let out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2];\n  let bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function hermite(out, a, b, c, d, t) {\n  let factorTimes2 = t * t;\n  let factor1 = factorTimes2 * (2 * t - 3) + 1;\n  let factor2 = factorTimes2 * (t - 2) + t;\n  let factor3 = factorTimes2 * (t - 1);\n  let factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nexport function bezier(out, a, b, c, d, t) {\n  let inverseFactor = 1 - t;\n  let inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  let factorTimes2 = t * t;\n  let factor1 = inverseFactorTimesTwo * inverseFactor;\n  let factor2 = 3 * t * inverseFactorTimesTwo;\n  let factor3 = 3 * factorTimes2 * inverseFactor;\n  let factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n\n  let r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  let z = (glMatrix.RANDOM() * 2.0) - 1.0;\n  let zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n  let x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n    let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n    let x = a[0], y = a[1], z = a[2];\n    // var qvec = [qx, qy, qz];\n    // var uv = vec3.cross([], qvec, a);\n    let uvx = qy * z - qz * y,\n        uvy = qz * x - qx * z,\n        uvz = qx * y - qy * x;\n    // var uuv = vec3.cross([], qvec, uv);\n    let uuvx = qy * uvz - qz * uvy,\n        uuvy = qz * uvx - qx * uvz,\n        uuvz = qx * uvy - qy * uvx;\n    // vec3.scale(uv, uv, 2 * w);\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n    // vec3.scale(uuv, uuv, 2);\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n    // return vec3.add(out, a, vec3.add(out, uv, uuv));\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateX(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateY(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nexport function rotateZ(out, a, b, c){\n  let p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let tempA = fromValues(a[0], a[1], a[2]);\n  let tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  let cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2];\n  let b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nexport function fromValues(x, y, z, w) {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  let x = b[0] - a[0];\n  let y = b[1] - a[1];\n  let z = b[2] - a[2];\n  let w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n  let x = a[0];\n  let y = a[1];\n  let z = a[2];\n  let w = a[3];\n  let len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n  let ax = a[0];\n  let ay = a[1];\n  let az = a[2];\n  let aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nexport function random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n  var v1, v2, v3, v4;\n  var s1, s2;\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nexport function transformQuat(out, a, q) {\n  let x = a[0], y = a[1], z = a[2];\n  let qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  let ix = qw * x + qy * z - qz * y;\n  let iy = qw * y + qz * x - qx * z;\n  let iz = qw * z + qx * y - qy * x;\n  let iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./common.js\"\nimport * as mat3 from \"./mat3.js\"\nimport * as vec3 from \"./vec3.js\"\nimport * as vec4 from \"./vec4.js\"\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nexport function getAxisAngle(out_axis, q) {\n  let rad = Math.acos(q[3]) * 2.0;\n  let s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nexport function calculateW(out, a) {\n  let x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  let ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  let bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  let omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n  let a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  let dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  let invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  let fTrace = m[0] + m[4] + m[8];\n  let fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    let i = 0;\n    if ( m[4] > m[0] )\n      i = 1;\n    if ( m[8] > m[i*3+i] )\n      i = 2;\n    let j = (i+1)%3;\n    let k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, x, y, z) {\n    let halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    let sx = Math.sin(x);\n    let cx = Math.cos(x);\n    let sy = Math.sin(y);\n    let cy = Math.cos(y);\n    let sz = Math.sin(z);\n    let cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nexport const clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nexport const fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport const equals = vec4.equals;\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nexport const rotationTo = (function() {\n  let tmpvec3 = vec3.create();\n  let xUnitVec3 = vec3.fromValues(1,0,0);\n  let yUnitVec3 = vec3.fromValues(0,1,0);\n\n  return function(out, a, b) {\n    let dot = vec3.dot(a, b);\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001)\n        vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\nexport const sqlerp = (function () {\n  let temp1 = create();\n  let temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nexport const setAxes = (function() {\n  let matr = mat3.create();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n\n/**\n * Dual Quaternion<br>\n * Format: [real, dual]<br>\n * Quaternion format: XYZW<br>\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\n * @module quat2\n */\n\n\n/**\n * Creates a new identity dual quat\n *\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\n */\nexport function create() {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = 0;\n  dq[1] = 0;\n  dq[2] = 0;\n  dq[3] = 1;\n  dq[4] = 0;\n  dq[5] = 0;\n  dq[6] = 0;\n  dq[7] = 0;\n  return dq;\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat2} a dual quaternion to clone\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function clone(a) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n\n/**\n * Creates a new dual quat initialized with the given values\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n\n/**\n * Creates a new dual quat from the given values (quat and translation)\n *\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component (translation)\n * @param {Number} y2 Y component (translation)\n * @param {Number} z2 Z component (translation)\n * @returns {quat2} new dual quaternion\n * @function\n */\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  let dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  let ax = x2 * 0.5,\n    ay = y2 * 0.5,\n    az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n\n/**\n * Creates a dual quat from a quaternion and a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q quaternion\n * @param {vec3} t tranlation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotationTranslation(out, q, t) {\n  let ax = t[0] * 0.5,\n    ay = t[1] * 0.5,\n    az = t[2] * 0.5,\n    bx = q[0],\n    by = q[1],\n    bz = q[2],\n    bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Creates a dual quat from a translation\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {vec3} t translation vector\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a dual quat from a quaternion\n *\n * @param {quat2} dual quaternion receiving operation result\n * @param {quat} q the quaternion\n * @returns {quat2} dual quaternion receiving operation result\n * @function\n */\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Creates a new dual quat from a matrix (4x4)\n *\n * @param {quat2} out the dual quaternion\n * @param {mat4} a the matrix\n * @returns {quat2} dual quat receiving operation result\n * @function\n */\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  let outer = quat.create();\n  mat4.getRotation(outer, a);\n  let t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n\n/**\n * Copy the values from one dual quat to another\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the source dual quaternion\n * @returns {quat2} out\n * @function\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Set a dual quat to the identity dual quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @returns {quat2} out\n */\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n\n/**\n * Set the components of a dual quat to the given values\n *\n * @param {quat2} out the receiving quaternion\n * @param {Number} x1 X component\n * @param {Number} y1 Y component\n * @param {Number} z1 Z component\n * @param {Number} w1 W component\n * @param {Number} x2 X component\n * @param {Number} y2 Y component\n * @param {Number} z2 Z component\n * @param {Number} w2 W component\n * @returns {quat2} out\n * @function\n */\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n\n/**\n * Gets the real part of a dual quat\n * @param  {quat} out real part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} real part\n */\nexport const getReal = quat.copy;\n\n/**\n * Gets the dual part of a dual quat\n * @param  {quat} out dual part\n * @param  {quat2} a Dual Quaternion\n * @return {quat} dual part\n */\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n\n/**\n * Set the real component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the real part\n * @returns {quat2} out\n * @function\n */\nexport const setReal = quat.copy;\n\n/**\n * Set the dual component of a dual quat to the given quaternion\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat} q a quaternion representing the dual part\n * @returns {quat2} out\n * @function\n */\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n\n/**\n * Gets the translation of a normalized dual quat\n * @param  {vec3} out translation\n * @param  {quat2} a Dual Quaternion to be decomposed\n * @return {vec3} translation\n */\nexport function getTranslation(out, a) {\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n\n/**\n * Translates a dual quat by the given vector\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to translate\n * @param {vec3} v vector to translate by\n * @returns {quat2} out\n */\nexport function translate(out, a, v) {\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3],\n    bx1 = v[0] * 0.5,\n    by1 = v[1] * 0.5,\n    bz1 = v[2] * 0.5,\n    ax2 = a[4],\n    ay2 = a[5],\n    az2 = a[6],\n    aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the X axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateX(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Y axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateY(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around the Z axis\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {number} rad how far should the rotation be\n * @returns {quat2} out\n */\nexport function rotateZ(out, a, rad) {\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7],\n    ax1 = ax * bw + aw * bx + ay * bz - az * by,\n    ay1 = ay * bw + aw * by + az * bx - ax * bz,\n    az1 = az * bw + aw * bz + ax * by - ay * bx,\n    aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (a * q)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {quat} q quaternion to rotate by\n * @returns {quat2} out\n */\nexport function rotateByQuatAppend(out, a, q) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    ax = a[0],\n    ay = a[1],\n    az = a[2],\n    aw = a[3];\n\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n\n/**\n * Rotates a dual quat by a given quaternion (q * a)\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat} q quaternion to rotate by\n * @param {quat2} a the dual quaternion to rotate\n * @returns {quat2} out\n */\nexport function rotateByQuatPrepend(out, q, a) {\n  let qx = q[0],\n    qy = q[1],\n    qz = q[2],\n    qw = q[3],\n    bx = a[0],\n    by = a[1],\n    bz = a[2],\n    bw = a[3];\n\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n\n/**\n * Rotates a dual quat around a given axis. Does the normalisation automatically\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the dual quaternion to rotate\n * @param {vec3} axis the axis to rotate around\n * @param {Number} rad how far the rotation should be\n * @returns {quat2} out\n */\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n  let axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);\n\n  rad = rad * 0.5;\n  let s = Math.sin(rad);\n  let bx = s * axis[0] / axisLength;\n  let by = s * axis[1] / axisLength;\n  let bz = s * axis[2] / axisLength;\n  let bw = Math.cos(rad);\n\n  let ax1 = a[0],\n    ay1 = a[1],\n    az1 = a[2],\n    aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n\n  let ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n\n  return out;\n}\n\n/**\n * Adds two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n * @function\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n\n/**\n * Multiplies two dual quat's\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {quat2} out\n */\nexport function multiply(out, a, b) {\n  let ax0 = a[0],\n    ay0 = a[1],\n    az0 = a[2],\n    aw0 = a[3],\n    bx1 = b[4],\n    by1 = b[5],\n    bz1 = b[6],\n    bw1 = b[7],\n    ax1 = a[4],\n    ay1 = a[5],\n    az1 = a[6],\n    aw1 = a[7],\n    bx0 = b[0],\n    by0 = b[1],\n    bz0 = b[2],\n    bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n\n/**\n * Alias for {@link quat2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Scales a dual quat by a scalar number\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the dual quat to scale\n * @param {Number} b amount to scale the dual quat by\n * @returns {quat2} out\n * @function\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n\n/**\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\n *\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = quat.dot;\n\n/**\n * Performs a linear interpolation between two dual quats's\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\n *\n * @param {quat2} out the receiving dual quat\n * @param {quat2} a the first operand\n * @param {quat2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat2} out\n */\nexport function lerp(out, a, b, t) {\n  let mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quat to calculate inverse of\n * @returns {quat2} out\n */\nexport function invert(out, a) {\n  let sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a dual quat\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\n *\n * @param {quat2} out the receiving quaternion\n * @param {quat2} a quat to calculate conjugate of\n * @returns {quat2} out\n */\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n\n/**\n * Calculates the length of a dual quat\n *\n * @param {quat2} a dual quat to calculate length of\n * @returns {Number} length of a\n * @function\n */\nexport const length = quat.length;\n\n/**\n * Alias for {@link quat2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Calculates the squared length of a dual quat\n *\n * @param {quat2} a dual quat to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nexport const squaredLength = quat.squaredLength;\n\n/**\n * Alias for {@link quat2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Normalize a dual quat\n *\n * @param {quat2} out the receiving dual quaternion\n * @param {quat2} a dual quaternion to normalize\n * @returns {quat2} out\n * @function\n */\nexport function normalize(out, a) {\n  let magnitude = squaredLength(a);\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    out[0] = a[0] / magnitude;\n    out[1] = a[1] / magnitude;\n    out[2] = a[2] / magnitude;\n    out[3] = a[3] / magnitude;\n    out[4] = a[4] / magnitude;\n    out[5] = a[5] / magnitude;\n    out[6] = a[6] / magnitude;\n    out[7] = a[7] / magnitude;\n  }\n  return out;\n}\n\n/**\n * Returns a string representation of a dual quatenion\n *\n * @param {quat2} a dual quaternion to represent as a string\n * @returns {String} string representation of the dual quat\n */\nexport function str(a) {\n  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';\n}\n\n/**\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat2} a the first dual quaternion.\n * @param {quat2} b the second dual quaternion.\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n    a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n\n/**\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\n *\n * @param {quat2} a the first dual quat.\n * @param {quat2} b the second dual quat.\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3],\n    a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3],\n    b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)));\n}\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nexport function fromValues(x, y) {\n  let out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nexport function round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nexport function normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nexport function transformMat4(out, a, m) {\n  let x = a[0];\n  let y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nexport function rotate(out, a, b, c) {\n  //Translate point to the origin\n  let p0 = a[0] - b[0],\n  p1 = a[1] - b[1],\n  sinC = Math.sin(c),\n  cosC = Math.cos(c);\n  \n  //perform rotation and translate to correct position\n  out[0] = p0*cosC - p1*sinC + b[0];\n  out[1] = p0*sinC + p1*cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nexport function angle(a, b) {\n  let x1 = a[0],\n    y1 = a[1],\n    x2 = b[0],\n    y2 = b[1];\n  \n  let len1 = x1*x1 + y1*y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n  \n  let len2 = x2*x2 + y2*y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n  \n  let cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n  \n  \n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nexport function str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0], a1 = a[1];\n  let b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nexport const len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nexport const sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nexport const div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nexport const dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nexport const sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nexport const sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nexport const forEach = (function() {\n  let vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    let i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n","import * as glMatrix from \"./gl-matrix/common.js\";\nimport * as mat2 from \"./gl-matrix/mat2.js\";\nimport * as mat2d from \"./gl-matrix/mat2d.js\";\nimport * as mat3 from \"./gl-matrix/mat3.js\";\nimport * as mat4 from \"./gl-matrix/mat4.js\";\nimport * as quat from \"./gl-matrix/quat.js\";\nimport * as quat2 from \"./gl-matrix/quat2.js\";\nimport * as vec2 from \"./gl-matrix/vec2.js\";\nimport * as vec3 from \"./gl-matrix/vec3.js\";\nimport * as vec4 from \"./gl-matrix/vec4.js\";\n\nexport {\n  glMatrix,\n  mat2, mat2d, mat3, mat4,\n  quat, quat2,\n  vec2, vec3, vec4,\n};\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar gl_matrix_1 = require(\"gl-matrix\");\r\n/**\r\n * The hexToCart matrix\r\n */\r\nexports.hexToCartMat = gl_matrix_1.mat2.fromValues(1, 0, Math.cos(Math.PI / 3), Math.sin(Math.PI / 3));\r\n/**\r\n * The cartToHex matrix\r\n */\r\nexports.cartToHexMat = gl_matrix_1.mat2.create();\r\ngl_matrix_1.mat2.invert(exports.cartToHexMat, exports.hexToCartMat);\r\n/**\r\n * Transform a vector from hexagonal coordinates to cartesian coordinated\r\n * @param out The vec2 to output to\r\n * @param a The vec2 to transform\r\n */\r\nfunction hexToCart(out, a) {\r\n    return gl_matrix_1.vec2.transformMat2(out, a, exports.hexToCartMat);\r\n}\r\nexports.hexToCart = hexToCart;\r\n/**\r\n * Transform a vector from cartesian coordinates to hexagonal coordinated\r\n * @param out The vec2 to output to\r\n * @param a The vec2 to transform\r\n */\r\nfunction cartToHex(out, a) {\r\n    return gl_matrix_1.vec2.transformMat2(out, a, exports.cartToHexMat);\r\n}\r\nexports.cartToHex = cartToHex;\r\n/**\r\n * The ratio between the outer and inner radii of a hexagon\r\n */\r\nexports.radiusRatio = Math.sin(Math.PI / 3);\r\n/**\r\n * The vertices for a hexagon\r\n */\r\nexports.hexVerts = [];\r\nfor (var i = 0; i < 6; i++) {\r\n    var theta = (i * Math.PI) / 3;\r\n    exports.hexVerts.push(gl_matrix_1.vec2.fromValues(Math.sin(theta) / exports.radiusRatio / 2, Math.cos(theta) / exports.radiusRatio / 2));\r\n}\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nexports.background = 'lightblue';\r\nexports.outline = 'white';\r\nexports.vertex = 'limegreen';\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar gl_matrix_1 = require(\"gl-matrix\");\r\nvar hex_1 = require(\"./hex\");\r\nvar colors = require(\"./colors\");\r\nvar Game = /** @class */ (function () {\r\n    function Game(ctx) {\r\n        this.mouseHex = gl_matrix_1.vec2.create();\r\n        this.ctx = ctx;\r\n        this.draw = this.draw.bind(this);\r\n    }\r\n    Game.prototype.start = function () {\r\n        var _this = this;\r\n        var canvas = this.ctx.canvas;\r\n        canvas.addEventListener('mousemove', function (ev) {\r\n            var v = gl_matrix_1.vec2.fromValues((ev.clientX - canvas.offsetLeft - _this.width / 2) / _this.scale, (ev.clientY - canvas.offsetTop - _this.height / 2) / _this.scale);\r\n            hex_1.cartToHex(v, v);\r\n            gl_matrix_1.vec2.round(v, v);\r\n            _this.mouseHex = v;\r\n        });\r\n        this.draw();\r\n    };\r\n    Game.prototype.draw = function () {\r\n        requestAnimationFrame(this.draw);\r\n        var ctx = this.ctx;\r\n        this.checkResize();\r\n        ctx.clearRect(0, 0, this.width, this.height);\r\n        ctx.save();\r\n        ctx.translate(this.width / 2, this.height / 2);\r\n        for (var y = -15; y < 15; y++) {\r\n            for (var x = -15; x < 15; x++) {\r\n                var v = gl_matrix_1.vec2.fromValues(x, y);\r\n                this.drawCell(v, gl_matrix_1.vec2.equals(v, this.mouseHex) ? colors.vertex : colors.background);\r\n            }\r\n        }\r\n        ctx.restore();\r\n    };\r\n    Game.prototype.checkResize = function () {\r\n        var canvas = this.ctx.canvas;\r\n        if (this.width !== canvas.clientWidth ||\r\n            this.height !== canvas.clientHeight) {\r\n            this.width = canvas.width = canvas.clientWidth;\r\n            this.height = canvas.height = canvas.clientHeight;\r\n            this.scale = Math.min(this.width, this.height) / 10;\r\n        }\r\n    };\r\n    Game.prototype.translateHex = function (v) {\r\n        var temp = gl_matrix_1.vec2.create();\r\n        gl_matrix_1.vec2.scale(temp, v, this.scale);\r\n        hex_1.hexToCart(temp, temp);\r\n        this.ctx.translate(temp[0], temp[1]);\r\n    };\r\n    Game.prototype.drawCell = function (v, type) {\r\n        var ctx = this.ctx;\r\n        ctx.save();\r\n        this.translateHex(v);\r\n        if (typeof type === 'string') {\r\n            ctx.fillStyle = type;\r\n            ctx.strokeStyle = colors.outline;\r\n            ctx.lineWidth = this.scale / 10;\r\n            ctx.beginPath();\r\n            for (var _i = 0, hexVerts_1 = hex_1.hexVerts; _i < hexVerts_1.length; _i++) {\r\n                var vert = hexVerts_1[_i];\r\n                ctx.lineTo(vert[0] * this.scale, vert[1] * this.scale);\r\n            }\r\n            ctx.closePath();\r\n            ctx.fill();\r\n            ctx.stroke();\r\n        }\r\n        ctx.restore();\r\n    };\r\n    return Game;\r\n}());\r\nexports[\"default\"] = Game;\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar game_1 = require(\"./game\");\r\nvar canvas = document.getElementById('main-canvas');\r\nvar ctx = canvas.getContext('2d');\r\nif (!ctx) {\r\n    throw new Error('Could not create drawing context');\r\n}\r\nvar game = new game_1[\"default\"](ctx);\r\ngame.start();\r\n"]}